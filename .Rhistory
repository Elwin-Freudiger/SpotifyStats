library(dplyr)
library(ggplot2)
library(kableExtra)
library(lubridate)
library(ggcorrplot)
spotify <- read.csv(here::here("spotify_info.csv")) %>%
select(-"Unnamed..0", -"X") %>%
mutate(
broadGenre = case_when(
grepl("hip hop", artistGenre, ignore.case = TRUE) ~ "Hip-Hop",
grepl("indie", artistGenre, ignore.case = TRUE) ~ "Indie",
grepl("rap", artistGenre, ignore.case = TRUE) ~ "Rap",
grepl("electro|edm", artistGenre, ignore.case = TRUE) ~ "Electronic",
grepl("r&b", artistGenre, ignore.case = TRUE) ~ "R&B",
grepl("country", artistGenre, ignore.case = TRUE) ~ "Country",
grepl("jazz", artistGenre, ignore.case = TRUE) ~ "Jazz",
grepl("pop", artistGenre, ignore.case = TRUE) ~ "Pop",
grepl("rock", artistGenre, ignore.case = TRUE) ~ "Rock",
grepl("classical", artistGenre, ignore.case = TRUE) ~ "Classical",
grepl("lo-fi", artistGenre, ignore.case = TRUE) ~ "Lo-Fi",
TRUE ~ "Other"  # Default category for unmatched genres
),
releaseDate = as.Date(releaseDate, format = "%Y"),
listener = as.factor(listener)
) %>%
slice_sample(n = nrow(.))  # Shuffle rows randomly
View(spotify)
# Group by trackName and artistName, then sum msPlayed
unique_tracks <- spotify %>%
group_by(trackName, artistName) %>%  # Group by unique track and artist
summarize(msPlayed = sum(msPlayed, na.rm = TRUE), .groups = 'drop')
View(unique_tracks)
# Calculate track popularity based on unique listeners
track_popularity <- spotify %>%
group_by(trackName, artistName) %>%  # Group by both trackName and artistName
summarise(unique_listeners = n_distinct(listener), .groups = "drop") %>%  # Count unique listeners per track-artist pair
arrange(desc(unique_listeners)) %>%  # Arrange by descending unique listeners
head(10)  # Keep only the top 10 tracks
# Display the track popularity table with kableExtra styling
track_popularity %>%
kbl(caption = "Top 10 Tracks by Unique Listeners") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
summary_output <- capture.output(summary(unique_artists$artistPop))
library(dplyr)
library(ggplot2)
library(kableExtra)
library(lubridate)
library(ggcorrplot)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(lubridate)
library(ggcorrplot)
spotify <- read.csv(here::here("spotify_info.csv")) %>%
select(-"Unnamed..0", -"X") %>%
mutate(
broadGenre = case_when(
grepl("hip hop", artistGenre, ignore.case = TRUE) ~ "Hip-Hop",
grepl("indie", artistGenre, ignore.case = TRUE) ~ "Indie",
grepl("rap", artistGenre, ignore.case = TRUE) ~ "Rap",
grepl("electro|edm", artistGenre, ignore.case = TRUE) ~ "Electronic",
grepl("r&b", artistGenre, ignore.case = TRUE) ~ "R&B",
grepl("country", artistGenre, ignore.case = TRUE) ~ "Country",
grepl("jazz", artistGenre, ignore.case = TRUE) ~ "Jazz",
grepl("pop", artistGenre, ignore.case = TRUE) ~ "Pop",
grepl("rock", artistGenre, ignore.case = TRUE) ~ "Rock",
grepl("classical", artistGenre, ignore.case = TRUE) ~ "Classical",
grepl("lo-fi", artistGenre, ignore.case = TRUE) ~ "Lo-Fi",
TRUE ~ "Other"  # Default category for unmatched genres
),
releaseDate = as.Date(releaseDate, format = "%Y"),
listener = as.factor(listener)
) %>%
slice_sample(n = nrow(.))  # Shuffle rows randomly
unique_artists <- spotify %>%
distinct(artistName, .keep_all = TRUE)
summary_output <- capture.output(summary(unique_artists$artistPop))
writeLines(summary_output, "summary_artist_popularity.txt")
unique_tracks <- spotify %>%
group_by(trackName, artistName) %>%  # Group by unique track and artist
summarize(msPlayed = sum(msPlayed, na.rm = TRUE), .groups = 'drop')
View(unique_tracks)
unique_tracks <- spotify %>%
group_by(trackName, artistName, releaseDate) %>%  # Group by unique track and artist
summarize(msPlayed = sum(msPlayed, na.rm = TRUE), .groups = 'drop')
View(unique_tracks)
tracks_per_year <- unique_tracks %>%
mutate(releaseYear = as.numeric(substr(releaseDate, 1, 4))) %>%
group_by(releaseYear) %>%
summarise(num_tracks = n(), .groups = "drop")
View(tracks_per_year)
png("tracks_per_year.png", width = 1000, height = 750)
ggplot(tracks_per_year, aes(x = releaseYear, y = num_tracks)) +
geom_bar(stat = "identity", fill = "#1DB954", color = "white") +
xlab("Release Year") +
ylab("Number of Tracks") +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
)
tracks_per_year <- unique_tracks %>%
mutate(releaseYear = as.numeric(substr(releaseDate, 1, 4))) %>%
group_by(releaseYear) %>%
summarise(num_tracks = n(), .groups = "drop")
png("tracks_per_year.png", width = 1000, height = 750)
ggplot(tracks_per_year, aes(x = releaseYear, y = num_tracks)) +
geom_bar(stat = "identity", fill = "#1DB954", color = "white") +
xlab("Release Year") +
ylab("Number of Tracks") +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
)
dev.off()
# Create a histogram for artist popularity
png("01_artist_popularity_histogram.png", width = 1000, height = 750)
ggplot(unique_artists, aes(x = artistPop)) +
geom_histogram(bins = 100, fill = "#1DB954", color = "white") +
xlab("Artist Popularity (0 to 100)") +
ylab("Frequency") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
dev.off()
summary_output <- capture.output(summary(unique_artists$artistPop))
writeLines(summary_output, "01_summary_artist_popularity.txt")
tracks_per_year <- unique_tracks %>%
mutate(releaseYear = as.numeric(substr(releaseDate, 1, 4))) %>%
group_by(releaseYear) %>%
summarise(num_tracks = n(), .groups = "drop")
png("02_tracks_per_year.png", width = 1000, height = 750)
ggplot(tracks_per_year, aes(x = releaseYear, y = num_tracks)) +
geom_bar(stat = "identity", fill = "#1DB954", color = "white") +
xlab("Release Year") +
ylab("Number of Tracks") +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
)
dev.off()
summary_output_02 <- capture.output(summary(tracks_per_year))
writeLines(summary_output_02, "02_summary_tracks_per_year.txt")
View(spotify)
View(unique_tracks)
unique_tracks <- spotify %>%
group_by(trackName, artistName, releaseDate, trackPop) %>%  # Group by unique track and artist
summarize(msPlayed = sum(msPlayed, na.rm = TRUE), .groups = 'drop')
View(unique_tracks)
pop_tracks <- unique_tracks %>%
group_by(trackPop) %>%
summarise(tracks = n(), .groups = "drop")
png("03_track_popularity.png", width = 1000, height = 750)
ggplot(pop_tracks, aes(x = trackPop, y = tracks)) +
geom_bar(stat = "identity", fill = "#1DB954", color = "white") +
xlab("Track Popularity") +
ylab("Number of Tracks") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
summary(pop_tracks$trackPop)
dev.off()
summary_output_03 <- capture.output(summary(pop_tracks))
writeLines(summary_output_03, "03_summary_tracks_per_year.txt")
summary_output_03 <- capture.output(summary(pop_tracks$trackPop))
writeLines(summary_output_03, "03_summary_tracks_per_year.txt")
summary_output_02 <- capture.output(summary(tracks_per_year$releaseYear))
writeLines(summary_output_02, "02_summary_tracks_per_year.txt")
correlation <- cor(spotify$artistPop, unique_tracks$trackPop)
unique_tracks <- spotify %>%
group_by(trackName, artistName, releaseDate, trackPop, artistPop) %>%  # Group by unique track and artist
summarize(msPlayed = sum(msPlayed, na.rm = TRUE), .groups = 'drop')
unique_tracks <- spotify %>%
group_by(trackName, artistName, releaseDate, trackPop, artistPop) %>%
summarize(msPlayed = sum(msPlayed, na.rm = TRUE), .groups = 'drop')
correlation <- cor(spotify$artistPop, unique_tracks$trackPop)
View(unique_artists)
correlation <- cor(unique_tracks$artistPop, unique_tracks$trackPop)
model <- lm(trackPop ~ artistPop, data = unique_artists)  # Linear regression model
slope <- coef(model)[2]  # Extract the slope
ggplot(spotify, aes(x = artistPop, y = trackPop)) +
geom_point(alpha = 1, size = 1) +
geom_smooth(method = "lm", color = "#1DB954", se = FALSE) +
xlab("Artist Popularity") +
ylab("Track Popularity") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
) +
annotate("text", x = 20, y = 90, label = paste0("Correlation: ", round(correlation, 2)), size = 10, color = "black") +  # Add correlation
annotate("text", x = 20, y = 85, label = paste0("Slope: ", round(slope, 2)), size = 10, color = "black")  # Add slope
correlation <- cor(unique_tracks$artistPop, unique_tracks$trackPop)
model <- lm(trackPop ~ artistPop, data = unique_artists)
slope <- coef(model)[2]
png("04_popularities.png", width = 1500, height = 750)
ggplot(spotify, aes(x = artistPop, y = trackPop)) +
geom_point(alpha = 1, size = 1) +
geom_smooth(method = "lm", color = "#1DB954", se = FALSE) +
xlab("Artist Popularity") +
ylab("Track Popularity") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
) +
annotate("text", x = 20, y = 90, label = paste0("Correlation: ", round(correlation, 2)), size = 10, color = "black") +  # Add correlation
annotate("text", x = 20, y = 85, label = paste0("Slope: ", round(slope, 2)), size = 10, color = "black")  # Add slope
dev.off()
# Define custom colors for the genres
genre_colors <- c(
"Pop" = "#1DB954", "Indie" = "#1DB954", "Hip-Hop" = "#1DB954",
"Country" = "#1DB954", "Rock" = "#1DB954", "Rap" = "#1DB954",
"Electronic" = "#1DB954", "Lo-Fi" = "#1DB954", "Jazz" = "#1DB954",
"R&B" = "#1DB954", "Classical" = "#1DB954", "Other" = "gray"
)
png("05_genres_total.png", width = 1000, height = 750)
ggplot(msPlayed_by_genre, aes(x = reorder(broadGenre, total_msPlayed), y = total_hours, fill = broadGenre)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = genre_colors) + # Apply custom colors
ggtitle("Broad Genres by Total Listening Time") +
xlab("Genre") +
ylab("Total Listening Time (hours)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.position = "none" # Remove legend for simplicity
) +
coord_flip() # Flip coordinates for better readability
# Define custom colors for the genres
genre_colors <- c(
"Pop" = "#1DB954", "Indie" = "#1DB954", "Hip-Hop" = "#1DB954",
"Country" = "#1DB954", "Rock" = "#1DB954", "Rap" = "#1DB954",
"Electronic" = "#1DB954", "Lo-Fi" = "#1DB954", "Jazz" = "#1DB954",
"R&B" = "#1DB954", "Classical" = "#1DB954", "Other" = "gray"
)
msPlayed_by_genre <- spotify %>%
group_by(broadGenre) %>%
summarise(total_msPlayed = sum(msPlayed, na.rm = TRUE)) %>%
mutate(total_hours = floor(total_msPlayed / (1000 * 60 * 60))) %>%
arrange(desc(total_msPlayed))
png("05_genres_total.png", width = 1000, height = 750)
ggplot(msPlayed_by_genre, aes(x = reorder(broadGenre, total_msPlayed), y = total_hours, fill = broadGenre)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = genre_colors) + # Apply custom colors
ggtitle("Broad Genres by Total Listening Time") +
xlab("Genre") +
ylab("Total Listening Time (hours)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.position = "none" # Remove legend for simplicity
) +
coord_flip() # Flip coordinates for better readability
dev.off()
# Define custom colors for the genres
genre_colors <- c(
"Pop" = "#1DB954", "Indie" = "#1DB954", "Hip-Hop" = "#1DB954",
"Country" = "#1DB954", "Rock" = "#1DB954", "Rap" = "#1DB954",
"Electronic" = "#1DB954", "Lo-Fi" = "#1DB954", "Jazz" = "#1DB954",
"R&B" = "#1DB954", "Classical" = "#1DB954", "Other" = "gray"
)
msPlayed_by_genre <- spotify %>%
group_by(broadGenre) %>%
summarise(total_msPlayed = sum(msPlayed, na.rm = TRUE)) %>%
mutate(total_hours = floor(total_msPlayed / (1000 * 60 * 60))) %>%
arrange(desc(total_msPlayed))
png("05_genres_total.png", width = 1000, height = 750)
ggplot(msPlayed_by_genre, aes(x = reorder(broadGenre, total_msPlayed), y = total_hours, fill = broadGenre)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = genre_colors) + # Apply custom colors
xlab("Broad Genre") +
ylab("Total Listening Time (hours)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.position = "none"
) +
coord_flip()
dev.off()
summary_output_03 <- capture.output(summary(pop_tracks$trackPop))
writeLines(summary_output_03, "03_summary_poptracks.txt")
summary_output_04 <- capture.output(summary(msPlayed_by_genre$broadGenre))
writeLines(summary_output_03, "04_summary_genre.txt")
summary_output_04 <- capture.output(summary(msPlayed_by_genre$broadGenre))
writeLines(summary_output_03, "04_summary_genre.txt")
summary_output_04 <- capture.output(summary(msPlayed_by_genre$broadGenre))
writeLines(summary_output_03, "04_summary_genre.txt")
summary_output_04 <- capture.output(summary(msPlayed_by_genre$broadGenre))
writeLines(summary_output_04, "04_summary_genre.txt")
summary_output_04 <- capture.output(summary(msPlayed_by_genre$broadGenre))
writeLines(summary_output_04, "04_summary_genre.txt")
summary_output_04 <- capture.output(summary(msPlayed_by_genre$total_msPlayed))
writeLines(summary_output_04, "04_summary_genre.txt")
summary_output_04 <- capture.output(summary(msPlayed_by_genre$broadGenre, msPlayed_by_genre$total_hours))
writeLines(summary_output_04, "04_summary_genre.txt")
summary_output_04 <- capture.output(summary(msPlayed_by_genre$total_hours))
writeLines(summary_output_04, "04_summary_genre.txt")
