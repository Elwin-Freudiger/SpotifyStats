library(dplyr)
library(ggplot2)
library(kableExtra)
library(lubridate)
library(ggcorrplot)
spotify <- read.csv(here::here("spotify_info.csv")) %>%
select(-"Unnamed..0", -"X") %>%
mutate(
broadGenre = case_when(
grepl("hip hop", artistGenre, ignore.case = TRUE) ~ "Hip-Hop",
grepl("indie", artistGenre, ignore.case = TRUE) ~ "Indie",
grepl("rap", artistGenre, ignore.case = TRUE) ~ "Rap",
grepl("electro|edm", artistGenre, ignore.case = TRUE) ~ "Electronic",
grepl("r&b", artistGenre, ignore.case = TRUE) ~ "R&B",
grepl("country", artistGenre, ignore.case = TRUE) ~ "Country",
grepl("jazz", artistGenre, ignore.case = TRUE) ~ "Jazz",
grepl("pop", artistGenre, ignore.case = TRUE) ~ "Pop",
grepl("rock", artistGenre, ignore.case = TRUE) ~ "Rock",
grepl("classical", artistGenre, ignore.case = TRUE) ~ "Classical",
grepl("lo-fi", artistGenre, ignore.case = TRUE) ~ "Lo-Fi",
TRUE ~ "Other"  # Default category for unmatched genres
),
releaseDate = as.Date(releaseDate, format = "%Y"),
listener = as.factor(listener)
) %>%
slice_sample(n = nrow(.))  # Shuffle rows randomly
View(spotify)
# Group by trackName and artistName, then sum msPlayed
unique_tracks <- spotify %>%
group_by(trackName, artistName) %>%  # Group by unique track and artist
summarize(msPlayed = sum(msPlayed, na.rm = TRUE), .groups = 'drop')
View(unique_tracks)
# Calculate track popularity based on unique listeners
track_popularity <- spotify %>%
group_by(trackName, artistName) %>%  # Group by both trackName and artistName
summarise(unique_listeners = n_distinct(listener), .groups = "drop") %>%  # Count unique listeners per track-artist pair
arrange(desc(unique_listeners)) %>%  # Arrange by descending unique listeners
head(10)  # Keep only the top 10 tracks
# Display the track popularity table with kableExtra styling
track_popularity %>%
kbl(caption = "Top 10 Tracks by Unique Listeners") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
