font_size = 12)
# Count the number of unique trackName and AlbumName for each artistName
tracks_by_artist <- tracks %>%
group_by(artistName) %>%
summarise(
track_count = n_distinct(trackName),  # Count unique tracks
album_count = n_distinct(albumName)  # Count unique albums
) %>%
arrange(desc(track_count))
# Display the top 10 artists by track and album count with kableExtra
tracks_by_artist %>%
head(10) %>% # Display the top 10 artists
kbl(caption = "Top 10 Artists by Unique Tracks and Albums") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
# Reshape the data to long format for plotting
top_10_artists_long <- tracks_by_artist %>%
head(10) %>%
pivot_longer(
cols = c(track_count, album_count),
names_to = "Category",
values_to = "Count"
) %>%
mutate(Category = factor(Category, levels = c("track_count", "album_count"))) # Set order: Tracks first, Albums second
# Plot the data with separate columns for tracks and albums
ggplot(top_10_artists_long, aes(x = reorder(artistName, -Count), y = Count, fill = Category)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
labs(
title = "Top 10 Artists by Unique Tracks and Albums",
x = "Artist Name",
y = "Count",
fill = "Category"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels
plot.title = element_text(hjust = 0.5)            # Center-align the title
) +
scale_fill_manual(
values = c("track_count" = "skyblue", "album_count" = "lightblue"),
labels = c("Tracks", "Albums") # Rename labels for better legend readability
)
track_popularity <- data %>%
group_by(trackID) %>%
summarise(unique_listeners = n_distinct(listener)) %>%
arrange(desc(unique_listeners)) %>%
left_join(tracks, by = "trackID") %>% # Join to get additional columns
distinct(trackName, .keep_all = TRUE) %>% # Remove duplicate track names
select(trackName, artistName, albumName, releaseDate, trackPop, unique_listeners) %>% # Select desired columns
head(10) # Get top 10 tracks
# Display the track popularity table with kableExtra styling
track_popularity %>%
kbl(caption = "Top 10 Tracks by Unique Listeners") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
ggplot(track_popularity, aes(x = reorder(trackName, -unique_listeners), y = unique_listeners, fill = trackName)) +
geom_bar(stat = "identity", width = 0.7) +
labs(
title = "Top 10 Tracks by Unique Listeners",
x = "Track Name",
y = "Number of Unique Listeners"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for readability
legend.position = "none",                         # Remove legend
plot.title = element_text(hjust = 0.5)            # Center-align the title
) +
scale_fill_brewer(palette = "Set3")
# Remove the specified columns and arrange the data
top_artists <- data %>%
select(-listener, -trackID, -msPlayed, -trackName, -albumName, -releaseDate, -trackPop) %>%
distinct(artistName, artistPop, artistGenre, artistRelated) %>% # Keep only distinct rows for artists
arrange(desc(artistPop), artistName) %>%
head(10)
# Display the top 10 artists with kableExtra styling
top_artists %>%
kbl(caption = "Top 10 Artists by Popularity") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
# Create the plot
ggplot(top_artists, aes(x = reorder(artistName, -artistPop), y = artistPop, fill = artistName)) +
geom_bar(stat = "identity", width = 0.7) +
labs(
title = "Top 10 Artists by Popularity",
x = "Artist Name",
y = "Popularity Score"
) +
theme_minimal() +
theme(
legend.position = "none",          # Remove the legend
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for readability
plot.title = element_text(hjust = 0.5)             # Center-align the title
) +
scale_fill_brewer(palette = "Set3")
# Calculate total listening time for each artist in hours
top_artists_listening <- data %>%
group_by(artistName) %>%
summarise(
total_hours = floor(sum(msPlayed, na.rm = TRUE) / (1000 * 60 * 60)) # Convert ms to hours and remove decimals
) %>%
arrange(desc(total_hours)) %>%
head(10) # Get top 10 artists
# Display the top 10 artists with kableExtra
top_artists_listening %>%
kbl(caption = "Top 10 Artists by Total Listening Time") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
# Plot the top 10 artists by total listening time in hours
ggplot(top_artists_listening, aes(x = reorder(artistName, -total_hours), y = total_hours, fill = artistName)) +
geom_bar(stat = "identity", width = 0.7) +
labs(
title = "Top 10 Artists by Total Listening Time",
x = "Artist Name",
y = "Total Listening Time (Hours)"
) +
theme_minimal() +
theme(
legend.position = "none",           # Remove the legend
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for better readability
plot.title = element_text(hjust = 0.5)            # Center-align the title
) +
scale_fill_brewer(palette = "Set3") # Optional: Adds a color palette
# Calculate top tracks by listening time in hours, rounded down, and handle duplicates
top_tracks_table <- data %>%
group_by(trackID) %>%
summarise(
total_hours = floor(sum(msPlayed, na.rm = TRUE) / (1000 * 60 * 60)) # Convert ms to hours and remove decimals
) %>%
arrange(desc(total_hours)) %>%
left_join(tracks, by = "trackID") %>% # Add additional columns from tracks
group_by(trackName) %>% # Group by trackName to handle duplicates
summarise(
artistName = first(artistName),                        # Keep the first artistName (consistent grouping)
albumName = first(albumName),                          # Keep the first albumName
releaseDate = min(releaseDate, na.rm = TRUE),          # Keep the oldest release date
trackPop = first(trackPop),                             # Keep the first popularity score (optional, can also average)
total_hours = sum(total_hours)                        # Sum total hours for duplicate track names
) %>%
arrange(desc(total_hours)) %>% # Re-sort by total_hours
head(10) # Get top 10 tracks
# Display the table using kableExtra
top_tracks_table %>%
kbl(caption = "Top 10 Tracks by Total Listening Time") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
# Calculate top tracks by listening time in hours
top_tracks <- data %>%
group_by(trackName) %>%
summarise(total_hours = sum(msPlayed, na.rm = TRUE) / (1000 * 60 * 60)) %>%
arrange(desc(total_hours)) %>%
head(10)
# Plot the top tracks
ggplot(top_tracks, aes(x = reorder(trackName, -total_hours), y = total_hours, fill = trackName)) +
geom_bar(stat = "identity", width = 0.7) +
labs(
title = "Top 10 Tracks by Listening Time",
x = "Track Name",
y = "Total Listening Time (Hours)"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
plot.title = element_text(hjust = 0.5),             # Center-align the title
legend.position = "none"                            # Remove the legend
) +
scale_fill_brewer(palette = "Set3") # Optional: Adds a color palette
library(readr)
library(dplyr)
library(tidyr)
library(kableExtra)
library(tm)
library(ggplot2)
# Import the datasets
listening_history <- read.csv("C:/Users/olivi/OneDrive/Bureau/Github/SpotifyStats/data/clean_data/Listening_History.csv", stringsAsFactors = FALSE)
tracks <- read.csv("C:/Users/olivi/OneDrive/Bureau/Github/SpotifyStats/data/clean_data/Tracks.csv", stringsAsFactors = FALSE)
artists <- read.csv("C:/Users/olivi/OneDrive/Bureau/Github/SpotifyStats/data/clean_data/Artists.csv", stringsAsFactors = FALSE)
# Join listening_history with tracks using trackID
listening_tracks <- listening_history %>%
left_join(tracks, by = "trackID")
# Join the resulting dataset with artists using artistName
data <- listening_tracks %>%
left_join(artists, by = "artistName")
head(data) %>%
kbl(caption = "Head of Dataset") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
# Check for missing values (NA and NULL)
missing_values <- sapply(data, function(x) sum(is.na(x)))
# Check for zero values
zero_values <- sapply(data, function(x) sum(x == 0, na.rm = TRUE))
# Combine results into a summary table
value_checks <- data.frame(
Column = names(data),
Missing = missing_values,
Zeros = zero_values
)
# Display the summary table
library(kableExtra)
value_checks %>%
kbl(caption = "Summary of Missing and Zero Values in Dataset") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
# Summary statistics
summary(data$artistPop)
# Histogram
hist(data$artistPop, main = "Artist Popularity Distribution", xlab = "Popularity", col = "lightblue", border = "black")
# Frequency of genres
genre_counts <- table(data$artistGenre)
# Bar plot with 45-degree x-axis labels
barplot(sort(genre_counts, decreasing = TRUE),
las = 2, # Rotates the axis labels
col = "lightgreen",
main = "Most Common Genres",
cex.names = 0.7) # Reduces the size of labels
# Adjust x-axis text angle to 45 degrees using par()
par(las = 2)  # This is for vertical axis text
mtext(side = 1, text = "Genres", line = 2, cex = 0.7)
ggplot(tracks, aes(x = releaseDate)) +
geom_bar(fill = "lightblue", color = "black") +
labs(
title = "Distribution of Tracks by Release Year",
x = "Release Year",
y = "Number of Tracks"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Histogram of track popularity
ggplot(tracks, aes(x = trackPop)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
labs(
title = "Track Popularity Distribution",
x = "Track Popularity",
y = "Frequency"
) +
theme_minimal()
ggplot(data, aes(x = msPlayed)) +
geom_histogram(binwidth = 50000, fill = "lightblue", color = "black") +
labs(title = "Distribution of Listening Time", x = "Milliseconds Played", y = "Frequency") +
theme_minimal()
data$artistGenre <- gsub(",", " ", data$artistGenre)
genres_corpus <- Corpus(VectorSource(data$artistGenre))
genres_dtm <- TermDocumentMatrix(genres_corpus)
genres_freq <- rowSums(as.matrix(genres_dtm))
top_genres <- sort(genres_freq, decreasing = TRUE)[1:10]
top_genres_table <- data.frame(
Genre = names(top_genres),
Count = as.integer(top_genres)
)
# Display the table using kableExtra
top_genres_table %>%
kbl(caption = "Top 10 Most Common Words in Genres") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
data$artistGenre <- gsub(",", " ", data$artistGenre)
genres_corpus <- Corpus(VectorSource(data$artistGenre))
genres_dtm <- TermDocumentMatrix(genres_corpus)
genres_freq <- rowSums(as.matrix(genres_dtm))
barplot(sort(genres_freq, decreasing = TRUE)[1:10],
las = 2,
col = "lightblue",
main = "Top 10 Most Common Words in Genres",
xlab = "Genres",         # Add x-axis label
ylab = "Frequency" # Add y-axis label
)
# Calculate top listeners with additional time columns, removing decimal points
top_listeners <- data %>%
group_by(listener) %>%
summarise(total_msPlayed = sum(msPlayed)) %>%
mutate(
total_minutes = floor(total_msPlayed / (1000 * 60)),  # Convert ms to minutes, remove decimals
total_hours = floor(total_msPlayed / (1000 * 60 * 60)),  # Convert ms to hours, remove decimals
total_days = floor(total_msPlayed / (1000 * 60 * 60 * 24))  # Convert ms to days, remove decimals
) %>%
arrange(desc(total_msPlayed)) %>%
head(10)
# Display the top listeners with kableExtra styling
top_listeners %>%
kbl(caption = "Top Listeners by Listening Time") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
# Plot top listeners and their total listening time in hours
ggplot(top_listeners, aes(x = reorder(listener, -total_hours), y = total_hours, fill = listener)) +
geom_bar(stat = "identity") +
labs(
title = "Top Listeners by Listening Time",
x = "Listener",
y = "Total Listening Time"
) +
theme_minimal() +
theme(
legend.position = "none",       # Remove legend
axis.text.x = element_text(angle = 45, hjust = 1), # Tilt x-axis labels
plot.title = element_text(hjust = 0.5) # Center-align title
) +
scale_fill_brewer(palette = "Set3") # Optional: Add a color palette
plot(data$artistPop,
jitter(1:nrow(data)),
main = "Artist Popularity Scatter Plot",
xlab = "Popularity", ylab = "Artists",
col = "steelblue")
# Calculate average popularity of tracks by release year
popularity_by_year <- data %>%
group_by(releaseDate) %>%
summarise(avg_popularity = mean(trackPop, na.rm = TRUE)) %>%
filter(!is.na(releaseDate)) # Remove missing years
# Plot the average popularity of tracks by release year
ggplot(popularity_by_year, aes(x = releaseDate, y = avg_popularity)) +
geom_line(color = "lightgreen", size = 1) +
geom_point(color = "black", size = 1) +
labs(
title = "Average Track Popularity by Release Year",
x = "Release Year",
y = "Average Popularity"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calculate average release year per listener
avg_year_by_listener <- data %>%
group_by(listener) %>%
summarise(
avg_release_year = round(mean(releaseDate, na.rm = TRUE)), # Calculate average year and round to nearest integer
track_count = n() # Number of tracks listened to
) %>%
arrange(avg_release_year) # Sort by average release year
# Display the top 10 listeners with their average release years
avg_year_by_listener %>%
head(10) %>%
kbl(caption = "Average Release Year by Listener") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
# Count the number of unique trackName and AlbumName for each artistName
tracks_by_artist <- tracks %>%
group_by(artistName) %>%
summarise(
track_count = n_distinct(trackName),  # Count unique tracks
album_count = n_distinct(albumName)  # Count unique albums
) %>%
arrange(desc(track_count))
# Display the top 10 artists by track and album count with kableExtra
tracks_by_artist %>%
head(10) %>% # Display the top 10 artists
kbl(caption = "Top 10 Artists by Unique Tracks and Albums") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
# Reshape the data to long format for plotting
top_10_artists_long <- tracks_by_artist %>%
head(10) %>%
pivot_longer(
cols = c(track_count, album_count),
names_to = "Category",
values_to = "Count"
) %>%
mutate(Category = factor(Category, levels = c("track_count", "album_count"))) # Set order: Tracks first, Albums second
# Plot the data with separate columns for tracks and albums
ggplot(top_10_artists_long, aes(x = reorder(artistName, -Count), y = Count, fill = Category)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
labs(
title = "Top 10 Artists by Unique Tracks and Albums",
x = "Artist Name",
y = "Count",
fill = "Category"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels
plot.title = element_text(hjust = 0.5)            # Center-align the title
) +
scale_fill_manual(
values = c("track_count" = "skyblue", "album_count" = "lightblue"),
labels = c("Tracks", "Albums") # Rename labels for better legend readability
)
track_popularity <- data %>%
group_by(trackID) %>%
summarise(unique_listeners = n_distinct(listener)) %>%
arrange(desc(unique_listeners)) %>%
left_join(tracks, by = "trackID") %>% # Join to get additional columns
distinct(trackName, .keep_all = TRUE) %>% # Remove duplicate track names
select(trackName, artistName, albumName, releaseDate, trackPop, unique_listeners) %>% # Select desired columns
head(10) # Get top 10 tracks
# Display the track popularity table with kableExtra styling
track_popularity %>%
kbl(caption = "Top 10 Tracks by Unique Listeners") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
ggplot(track_popularity, aes(x = reorder(trackName, -unique_listeners), y = unique_listeners, fill = trackName)) +
geom_bar(stat = "identity", width = 0.7) +
labs(
title = "Top 10 Tracks by Unique Listeners",
x = "Track Name",
y = "Number of Unique Listeners"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for readability
legend.position = "none",                         # Remove legend
plot.title = element_text(hjust = 0.5)            # Center-align the title
) +
scale_fill_brewer(palette = "Set3")
# Remove the specified columns and arrange the data
top_artists <- data %>%
select(-listener, -trackID, -msPlayed, -trackName, -albumName, -releaseDate, -trackPop) %>%
distinct(artistName, artistPop, artistGenre, artistRelated) %>% # Keep only distinct rows for artists
arrange(desc(artistPop), artistName) %>%
head(10)
# Display the top 10 artists with kableExtra styling
top_artists %>%
kbl(caption = "Top 10 Artists by Popularity") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
# Create the plot
ggplot(top_artists, aes(x = reorder(artistName, -artistPop), y = artistPop, fill = artistName)) +
geom_bar(stat = "identity", width = 0.7) +
labs(
title = "Top 10 Artists by Popularity",
x = "Artist Name",
y = "Popularity Score"
) +
theme_minimal() +
theme(
legend.position = "none",          # Remove the legend
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for readability
plot.title = element_text(hjust = 0.5)             # Center-align the title
) +
scale_fill_brewer(palette = "Set3")
# Calculate total listening time for each artist in hours
top_artists_listening <- data %>%
group_by(artistName) %>%
summarise(
total_hours = floor(sum(msPlayed, na.rm = TRUE) / (1000 * 60 * 60)) # Convert ms to hours and remove decimals
) %>%
arrange(desc(total_hours)) %>%
head(10) # Get top 10 artists
# Display the top 10 artists with kableExtra
top_artists_listening %>%
kbl(caption = "Top 10 Artists by Total Listening Time") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
# Plot the top 10 artists by total listening time in hours
ggplot(top_artists_listening, aes(x = reorder(artistName, -total_hours), y = total_hours, fill = artistName)) +
geom_bar(stat = "identity", width = 0.7) +
labs(
title = "Top 10 Artists by Total Listening Time",
x = "Artist Name",
y = "Total Listening Time (Hours)"
) +
theme_minimal() +
theme(
legend.position = "none",           # Remove the legend
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for better readability
plot.title = element_text(hjust = 0.5)            # Center-align the title
) +
scale_fill_brewer(palette = "Set3") # Optional: Adds a color palette
# Calculate top tracks by listening time in hours, rounded down, and handle duplicates
top_tracks_table <- data %>%
group_by(trackID) %>%
summarise(
total_hours = floor(sum(msPlayed, na.rm = TRUE) / (1000 * 60 * 60)) # Convert ms to hours and remove decimals
) %>%
arrange(desc(total_hours)) %>%
left_join(tracks, by = "trackID") %>% # Add additional columns from tracks
group_by(trackName) %>% # Group by trackName to handle duplicates
summarise(
artistName = first(artistName),                        # Keep the first artistName (consistent grouping)
albumName = first(albumName),                          # Keep the first albumName
releaseDate = min(releaseDate, na.rm = TRUE),          # Keep the oldest release date
trackPop = first(trackPop),                             # Keep the first popularity score (optional, can also average)
total_hours = sum(total_hours)                        # Sum total hours for duplicate track names
) %>%
arrange(desc(total_hours)) %>% # Re-sort by total_hours
head(10) # Get top 10 tracks
# Display the table using kableExtra
top_tracks_table %>%
kbl(caption = "Top 10 Tracks by Total Listening Time") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
# Calculate top tracks by listening time in hours
top_tracks <- data %>%
group_by(trackName) %>%
summarise(total_hours = sum(msPlayed, na.rm = TRUE) / (1000 * 60 * 60)) %>%
arrange(desc(total_hours)) %>%
head(10)
# Plot the top tracks
ggplot(top_tracks, aes(x = reorder(trackName, -total_hours), y = total_hours, fill = trackName)) +
geom_bar(stat = "identity", width = 0.7) +
labs(
title = "Top 10 Tracks by Listening Time",
x = "Track Name",
y = "Total Listening Time (Hours)"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
plot.title = element_text(hjust = 0.5),             # Center-align the title
legend.position = "none"                            # Remove the legend
) +
scale_fill_brewer(palette = "Set3") # Optional: Adds a color palette
