# libraries
library(jsonlite)
# libraries
library(jsonlite)
artists <- fromJSON("data/clean_data/Artists.json")
# libraries
library(jsonlite)
# libraries
library(jsonlite)
artists <- fromJSON("data/clean_data/Artists.json")
# libraries
library(readr)
artists <- read.csv("data/clean_data/Artists.csv")
artists <- read.csv("SpotifyStats/data/clean_data/Artists.csv")
artists <- read.csv("C:/Users/olivi/OneDrive/Bureau/Github/SpotifyStats/data/clean_data/Artists.csv")
artists <- read.csv("C:/Users/olivi/OneDrive/Bureau/Github/SpotifyStats/data/clean_data/Artists.csv")
head(artists)
library(summarytools)
summary <- dfSummary(artists)
summary
library(readr)
# artists <- read.csv("C:/Users/olivi/OneDrive/Bureau/Github/SpotifyStats/data/clean_data/Artists.csv")
artists <- read.csv("SpotifyStats/data/clean_data/Artists.csv")
library(readr)
# artists <- read.csv("C:/Users/olivi/OneDrive/Bureau/Github/SpotifyStats/data/clean_data/Artists.csv")
artists <- read.csv("Github/SpotifyStats/data/clean_data/Artists.csv")
library(readr)
artists <- read.csv("C:/Users/olivi/OneDrive/Bureau/Github/SpotifyStats/data/clean_data/Artists.csv")
head(artists)
# Summary statistics
summary(data$artistPop)
# Summary statistics
summary(artists$artistPop)
# Histogram
hist(artists$artistPop, main = "Artist Popularity Distribution", xlab = "Popularity", col = "lightblue", border = "white")
# Frequency of genres
table(data$artistGenre)
# Frequency of genres
table(artists$artistGenre)
# Bar plot for genres
barplot(sort(table(artists$artistGenre), decreasing = TRUE), las = 2, col = "lightgreen", main = "Most Common Genres")
# Frequency of genres
genre_counts <- table(artists$artistGenre)
# Bar plot with 45-degree x-axis labels
barplot(sort(genre_counts, decreasing = TRUE),
las = 2, # Rotates the axis labels
col = "lightgreen",
main = "Most Common Genres",
cex.names = 0.7) # Reduces the size of labels
# Adjust x-axis text angle to 45 degrees using par()
par(las = 2)  # This is for vertical axis text
mtext(side = 1, text = "Genres", line = 2, cex = 0.7)
# Frequency of genres
table(artists$artistGenre)
# Bar plot for genres
barplot(sort(table(artists$artistGenre), decreasing = TRUE), las = 2, col = "lightgreen", main = "Most Common Genres")
# Frequency of genres
genre_counts <- table(artists$artistGenre)
# Bar plot with 45-degree x-axis labels
barplot(sort(genre_counts, decreasing = TRUE),
las = 2, # Rotates the axis labels
col = "lightgreen",
main = "Most Common Genres",
cex.names = 0.7) # Reduces the size of labels
# Adjust x-axis text angle to 45 degrees using par()
par(las = 2)  # This is for vertical axis text
mtext(side = 1, text = "Genres", line = 2, cex = 0.7)
library(readr)
library(kableExtra)
artists <- read.csv("C:/Users/olivi/OneDrive/Bureau/Github/SpotifyStats/data/clean_data/Artists.csv")
head(artists) %>%
kbl() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
library(readr)
library(kableExtra)
artists <- read.csv("C:/Users/olivi/OneDrive/Bureau/Github/SpotifyStats/data/clean_data/Artists.csv")
head(artists) %>%
kbl() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
plot(artists$artistPop, jitter(1:nrow(artists)), main = "Artist Popularity Scatter Plot", xlab = "Popularity", ylab = "Artists", col = "darkred")
top_artists <- artists[order(-artists$artistPop), ]
head(top_artists, 10)
# Arrange the data by artist popularity in descending order
top_artists <- data %>%
arrange(desc(artistPop)) %>%
head(10)
library(dplyr)
# Arrange the data by artist popularity in descending order
top_artists <- data %>%
arrange(desc(artistPop)) %>%
head(10)
library(dplyr)
# Arrange the data by artist popularity in descending order
top_artists <- artists %>%
arrange(desc(artistPop)) %>%
head(10)
# Display the top 10 artists with kableExtra styling
top_artists %>%
kbl(caption = "Top 10 Artists by Popularity") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
library(ggplot2)
library(dplyr)
# Get the top 10 artists by popularity
top_artists <- data %>%
arrange(desc(artistPop)) %>%
head(10)
library(ggplot2)
library(dplyr)
# Get the top 10 artists by popularity
top_artists <- artists %>%
arrange(desc(artistPop)) %>%
head(10)
# Create a bar plot
ggplot(top_artists, aes(x = reorder(artistName, -artistPop), y = artistPop, fill = artistName)) +
geom_bar(stat = "identity") +
coord_flip() + # Flip coordinates for better readability
theme_minimal() +
labs(
title = "Top 10 Artists by Popularity",
x = "Artist Name",
y = "Popularity"
) +
theme(
legend.position = "none", # Remove legend
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
library(ggplot2)
library(dplyr)
# Get the top 10 artists by popularity
top_artists <- data %>%
arrange(desc(artistPop)) %>%
head(10)
library(ggplot2)
library(dplyr)
# Get the top 10 artists by popularity
top_artists <- artists %>%
arrange(desc(artistPop)) %>%
head(10)
# Create a vertical bar plot
ggplot(top_artists, aes(x = reorder(artistName, -artistPop), y = artistPop, fill = artistName)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(
title = "Top 10 Artists by Popularity",
x = "Artist Name",
y = "Popularity"
) +
theme(
legend.position = "none", # Remove legend
axis.text.x = element_text(angle = 45, hjust = 1), # Tilt x-axis labels
plot.title = element_text(hjust = 0.5)
)
library(kableExtra)
library(dplyr)
# Arrange the data by artist popularity in descending order, then alphabetically by artist name
top_artists <- artists %>%
arrange(desc(artistPop), artistName) %>%
head(10)
# Display the top 10 artists with kableExtra styling
top_artists %>%
kbl(caption = "Top 10 Artists by Popularity (Alphabetical Order)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 12)
library(ggplot2)
library(dplyr)
# Get the top 10 artists by popularity
top_artists <- artists %>%
arrange(desc(artistPop)) %>%
head(10) %>%
arrange(artistName) # Sort alphabetically by artist name
# Create a vertical bar plot
ggplot(top_artists, aes(x = artistName, y = artistPop, fill = artistName)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(
title = "Top 10 Artists by Popularity (Alphabetical Order)",
x = "Artist Name",
y = "Popularity"
) +
theme(
legend.position = "none", # Remove legend
axis.text.x = element_text(angle = 45, hjust = 1), # Tilt x-axis labels
plot.title = element_text(hjust = 0.5)
)
library(ggplot2)
library(dplyr)
# Get the top 10 artists by popularity, then arrange alphabetically within popularity
top_artists <- artists %>%
arrange(desc(artistPop), artistName) %>% # Sort by popularity (descending), then by name (alphabetically)
head(10)
# Create a vertical bar plot
ggplot(top_artists, aes(x = reorder(artistName, -artistPop), y = artistPop, fill = artistName)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(
title = "Top 10 Artists by Popularity (Alphabetical Within Popularity)",
x = "Artist Name",
y = "Popularity"
) +
theme(
legend.position = "none", # Remove legend
axis.text.x = element_text(angle = 45, hjust = 1), # Tilt x-axis labels for readability
plot.title = element_text(hjust = 0.5)
)
library(ggplot2)
ggplot(data, aes(x = artistGenre, y = artistPop)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Artist Popularity by Genre", x = "Genre", y = "Popularity")
library(ggplot2)
library(dplyr)
# Get the top 10 artists by popularity, then arrange alphabetically within popularity
top_artists <- artists %>%
arrange(desc(artistPop), artistName) %>% # Sort by popularity (descending), then by name (alphabetically)
head(10)
# Create a vertical bar plot
ggplot(top_artists, aes(x = reorder(artistName, -artistPop), y = artistPop, fill = artistName)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(
title = "Top 10 Artists by Popularity",
x = "Artist Name",
y = "Popularity"
) +
theme(
legend.position = "none", # Remove legend
axis.text.x = element_text(angle = 45, hjust = 1), # Tilt x-axis labels for readability
plot.title = element_text(hjust = 0.5)
)
library(ggplot2)
ggplot(artists, aes(x = artistGenre, y = artistPop)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Artist Popularity by Genre", x = "Genre", y = "Popularity")
library(tm)
genres_corpus <- Corpus(VectorSource(artists$artistGenre))
genres_dtm <- TermDocumentMatrix(genres_corpus)
genres_freq <- rowSums(as.matrix(genres_dtm))
barplot(sort(genres_freq, decreasing = TRUE)[1:10], las = 2, col = "orange", main = "Top 10 Most Common Words in Genres")
library(igraph)
edges <- data.frame(from = data$artistName, to = strsplit(data$artistRelated, ", "))
library(igraph)
edges <- data.frame(from = artists$artistName, to = strsplit(artists$artistRelated, ", "))
library(tm)
genres_corpus <- Corpus(VectorSource(artists$artistGenre))
genres_dtm <- TermDocumentMatrix(genres_corpus)
genres_freq <- rowSums(as.matrix(genres_dtm))
barplot(sort(genres_freq, decreasing = TRUE)[1:10], las = 2, col = "orange", main = "Top 10 Most Common Words in Genres")
library(tm)
# Remove commas from the genres column
artists$artistGenre <- gsub(",", " ", artists$artistGenre)
# Create a text corpus from the cleaned genres
genres_corpus <- Corpus(VectorSource(artists$artistGenre))
# Create a Term-Document Matrix
genres_dtm <- TermDocumentMatrix(genres_corpus)
# Calculate word frequencies
genres_freq <- rowSums(as.matrix(genres_dtm))
# Create a barplot of the top 10 most common words
barplot(sort(genres_freq, decreasing = TRUE)[1:10],
las = 2,
col = "orange",
main = "Top 10 Most Common Words in Genres")
library(tm)
artists$artistGenre <- gsub(",", " ", artists$artistGenre)
genres_corpus <- Corpus(VectorSource(artists$artistGenre))
genres_dtm <- TermDocumentMatrix(genres_corpus)
genres_freq <- rowSums(as.matrix(genres_dtm))
barplot(sort(genres_freq, decreasing = TRUE)[1:10],
las = 2,
col = "orange",
main = "Top 10 Most Common Words in Genres")
